plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "kotlinx-serialization"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


android {
    namespace "com.github.jing332.alistflutter"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion



    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.github.jing332.alistflutter"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }


    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            java.srcDirs = ['src/main/java', 'src/main/kotlin']
        }
    }

//    kotlin {
//        jvmToolchain  = 17
//    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }

        debug {
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters "arm64-v8a"
            }
        }
    }
}

flutter {
    source '../..'
}
////获取flutter的sdk路径
//def flutterRoot = localProperties.getProperty('flutter.sdk')
//if (flutterRoot == null) {
//    throw new Exception("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
//}
dependencies {
//    compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")

    //noinspection GradleDependency
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'

    implementation 'com.louiscad.splitties:splitties-systemservices:3.0.0'

    implementation 'com.github.cioccarellia:ksprefs:2.4.0'

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.0")


}
